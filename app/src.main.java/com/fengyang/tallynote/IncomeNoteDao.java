package com.fengyang.tallynote;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fengyang.tallynote.model.IncomeNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INCOME_NOTE".
*/
public class IncomeNoteDao extends AbstractDao<IncomeNote, Void> {

    public static final String TABLENAME = "INCOME_NOTE";

    /**
     * Properties of entity IncomeNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Money = new Property(1, String.class, "money", false, "MONEY");
        public final static Property IncomeRatio = new Property(2, String.class, "incomeRatio", false, "INCOME_RATIO");
        public final static Property Days = new Property(3, String.class, "days", false, "DAYS");
        public final static Property Durtion = new Property(4, String.class, "durtion", false, "DURTION");
        public final static Property DayIncome = new Property(5, String.class, "dayIncome", false, "DAY_INCOME");
        public final static Property FinalIncome = new Property(6, String.class, "finalIncome", false, "FINAL_INCOME");
        public final static Property FinalCash = new Property(7, String.class, "finalCash", false, "FINAL_CASH");
        public final static Property FinalCashGo = new Property(8, String.class, "finalCashGo", false, "FINAL_CASH_GO");
        public final static Property Finished = new Property(9, int.class, "finished", false, "FINISHED");
        public final static Property Remark = new Property(10, String.class, "remark", false, "REMARK");
        public final static Property Time = new Property(11, String.class, "time", false, "TIME");
    }


    public IncomeNoteDao(DaoConfig config) {
        super(config);
    }
    
    public IncomeNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INCOME_NOTE\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"MONEY\" TEXT," + // 1: money
                "\"INCOME_RATIO\" TEXT," + // 2: incomeRatio
                "\"DAYS\" TEXT," + // 3: days
                "\"DURTION\" TEXT," + // 4: durtion
                "\"DAY_INCOME\" TEXT," + // 5: dayIncome
                "\"FINAL_INCOME\" TEXT," + // 6: finalIncome
                "\"FINAL_CASH\" TEXT," + // 7: finalCash
                "\"FINAL_CASH_GO\" TEXT," + // 8: finalCashGo
                "\"FINISHED\" INTEGER NOT NULL ," + // 9: finished
                "\"REMARK\" TEXT," + // 10: remark
                "\"TIME\" TEXT);"); // 11: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INCOME_NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IncomeNote entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(2, money);
        }
 
        String incomeRatio = entity.getIncomeRatio();
        if (incomeRatio != null) {
            stmt.bindString(3, incomeRatio);
        }
 
        String days = entity.getDays();
        if (days != null) {
            stmt.bindString(4, days);
        }
 
        String durtion = entity.getDurtion();
        if (durtion != null) {
            stmt.bindString(5, durtion);
        }
 
        String dayIncome = entity.getDayIncome();
        if (dayIncome != null) {
            stmt.bindString(6, dayIncome);
        }
 
        String finalIncome = entity.getFinalIncome();
        if (finalIncome != null) {
            stmt.bindString(7, finalIncome);
        }
 
        String finalCash = entity.getFinalCash();
        if (finalCash != null) {
            stmt.bindString(8, finalCash);
        }
 
        String finalCashGo = entity.getFinalCashGo();
        if (finalCashGo != null) {
            stmt.bindString(9, finalCashGo);
        }
        stmt.bindLong(10, entity.getFinished());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IncomeNote entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(2, money);
        }
 
        String incomeRatio = entity.getIncomeRatio();
        if (incomeRatio != null) {
            stmt.bindString(3, incomeRatio);
        }
 
        String days = entity.getDays();
        if (days != null) {
            stmt.bindString(4, days);
        }
 
        String durtion = entity.getDurtion();
        if (durtion != null) {
            stmt.bindString(5, durtion);
        }
 
        String dayIncome = entity.getDayIncome();
        if (dayIncome != null) {
            stmt.bindString(6, dayIncome);
        }
 
        String finalIncome = entity.getFinalIncome();
        if (finalIncome != null) {
            stmt.bindString(7, finalIncome);
        }
 
        String finalCash = entity.getFinalCash();
        if (finalCash != null) {
            stmt.bindString(8, finalCash);
        }
 
        String finalCashGo = entity.getFinalCashGo();
        if (finalCashGo != null) {
            stmt.bindString(9, finalCashGo);
        }
        stmt.bindLong(10, entity.getFinished());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(12, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public IncomeNote readEntity(Cursor cursor, int offset) {
        IncomeNote entity = new IncomeNote( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // money
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // incomeRatio
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // days
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // durtion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dayIncome
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // finalIncome
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // finalCash
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // finalCashGo
            cursor.getInt(offset + 9), // finished
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IncomeNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMoney(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIncomeRatio(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDays(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDurtion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDayIncome(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFinalIncome(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFinalCash(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinalCashGo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFinished(cursor.getInt(offset + 9));
        entity.setRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(IncomeNote entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(IncomeNote entity) {
        return null;
    }

    @Override
    public boolean hasKey(IncomeNote entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
