package com.fengyang.tallynote.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fengyang.tallynote.model.MonthNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONTH_NOTE".
*/
public class MonthNoteDao extends AbstractDao<MonthNote, Void> {

    public static final String TABLENAME = "MONTH_NOTE";

    /**
     * Properties of entity MonthNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Last_balance = new Property(0, String.class, "last_balance", false, "LAST_BALANCE");
        public final static Property Pay = new Property(1, String.class, "pay", false, "PAY");
        public final static Property Salary = new Property(2, String.class, "salary", false, "SALARY");
        public final static Property Income = new Property(3, String.class, "income", false, "INCOME");
        public final static Property Balance = new Property(4, String.class, "balance", false, "BALANCE");
        public final static Property Actual_balance = new Property(5, String.class, "actual_balance", false, "ACTUAL_BALANCE");
        public final static Property Duration = new Property(6, String.class, "duration", false, "DURATION");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
    }


    public MonthNoteDao(DaoConfig config) {
        super(config);
    }
    
    public MonthNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONTH_NOTE\" (" + //
                "\"LAST_BALANCE\" TEXT," + // 0: last_balance
                "\"PAY\" TEXT," + // 1: pay
                "\"SALARY\" TEXT," + // 2: salary
                "\"INCOME\" TEXT," + // 3: income
                "\"BALANCE\" TEXT," + // 4: balance
                "\"ACTUAL_BALANCE\" TEXT," + // 5: actual_balance
                "\"DURATION\" TEXT," + // 6: duration
                "\"REMARK\" TEXT," + // 7: remark
                "\"TIME\" TEXT);"); // 8: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONTH_NOTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonthNote entity) {
        stmt.clearBindings();
 
        String last_balance = entity.getLast_balance();
        if (last_balance != null) {
            stmt.bindString(1, last_balance);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(2, pay);
        }
 
        String salary = entity.getSalary();
        if (salary != null) {
            stmt.bindString(3, salary);
        }
 
        String income = entity.getIncome();
        if (income != null) {
            stmt.bindString(4, income);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(5, balance);
        }
 
        String actual_balance = entity.getActual_balance();
        if (actual_balance != null) {
            stmt.bindString(6, actual_balance);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonthNote entity) {
        stmt.clearBindings();
 
        String last_balance = entity.getLast_balance();
        if (last_balance != null) {
            stmt.bindString(1, last_balance);
        }
 
        String pay = entity.getPay();
        if (pay != null) {
            stmt.bindString(2, pay);
        }
 
        String salary = entity.getSalary();
        if (salary != null) {
            stmt.bindString(3, salary);
        }
 
        String income = entity.getIncome();
        if (income != null) {
            stmt.bindString(4, income);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(5, balance);
        }
 
        String actual_balance = entity.getActual_balance();
        if (actual_balance != null) {
            stmt.bindString(6, actual_balance);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(7, duration);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MonthNote readEntity(Cursor cursor, int offset) {
        MonthNote entity = new MonthNote( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // last_balance
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // pay
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // salary
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // income
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // balance
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // actual_balance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonthNote entity, int offset) {
        entity.setLast_balance(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPay(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSalary(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIncome(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBalance(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setActual_balance(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDuration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MonthNote entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MonthNote entity) {
        return null;
    }

    @Override
    public boolean hasKey(MonthNote entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
